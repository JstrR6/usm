<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order of Battle</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
        /* Your existing styles */
        .box {
            position: absolute;
            border: 1px solid #ccc;
            padding: 10px;
            background-color: #f9f9f9;
        }
        .box-header {
            font-weight: bold;
        }
        .delete-btn {
            color: red;
            cursor: pointer;
            margin-left: 10px;
        }
    </style>
</head>
<body>
    <h1>Order of Battle</h1>
    <div id="orbat-container"></div>
    <% if (userRoles.includes('High Command')) { %>
        <button class="add-box" onclick="addBox()">Add Box</button>
    <% } %>
    <input type="hidden" id="userRolesData" value="<%= JSON.stringify(userRoles || []) %>">
    
    <script>
        // Parse the roles data from the hidden input
        const userRolesData = document.getElementById('userRolesData').value;
        const userRoles = JSON.parse(userRolesData);
        const canEdit = userRoles.includes('High Command');

        let boxes = [];
        let draggedElement = null;
        let offsetX, offsetY;

        function loadOrbat() {
            fetch('/api/orbat')
                .then(response => response.json())
                .then(data => {
                    boxes = data.boxes || [];
                    renderOrbat();
                });
        }

        function renderOrbat() {
            const container = document.getElementById('orbat-container');
            container.innerHTML = '';
            boxes.forEach((box, boxIndex) => {
                const boxDiv = document.createElement('div');
                boxDiv.className = 'box';
                boxDiv.style.left = `${box.position.x}px`;
                boxDiv.style.top = `${box.position.y}px`;

                if (canEdit) {
                    boxDiv.onmousedown = (e) => {
                        draggedElement = boxDiv;
                        offsetX = e.clientX - boxDiv.offsetLeft;
                        offsetY = e.clientY - boxDiv.offsetTop;
                        document.onmousemove = (e) => {
                            boxDiv.style.left = `${e.clientX - offsetX}px`;
                            boxDiv.style.top = `${e.clientY - offsetY}px`;
                        };
                        document.onmouseup = () => {
                            document.onmousemove = null;
                            document.onmouseup = null;
                            box.position.x = boxDiv.offsetLeft;
                            box.position.y = boxDiv.offsetTop;
                            saveOrbat();
                        };
                    };
                }

                const boxHeader = document.createElement('div');
                boxHeader.className = 'box-header';

                const titleInput = document.createElement('input');
                titleInput.type = 'text';
                titleInput.value = box.title;
                titleInput.className = 'box-title';
                titleInput.readOnly = !canEdit; // Make title editable only if canEdit is true
                titleInput.onchange = () => {
                    if (canEdit) {
                        box.title = titleInput.value;
                        saveOrbat();
                    }
                };
                boxHeader.appendChild(titleInput);

                if (canEdit) {
                    const deleteBoxBtn = document.createElement('span');
                    deleteBoxBtn.className = 'delete-btn';
                    deleteBoxBtn.textContent = 'Delete Box';
                    deleteBoxBtn.onclick = () => {
                        boxes.splice(boxIndex, 1);
                        renderOrbat();
                        saveOrbat();
                    };
                    boxHeader.appendChild(deleteBoxBtn);
                }

                boxDiv.appendChild(boxHeader);
                container.appendChild(boxDiv);
            });
        }

        function addBox() {
            const newBox = {
                title: `Box ${boxes.length + 1}`,
                ranks: [],
                position: { x: 50, y: 50 }
            };
            boxes.push(newBox);
            renderOrbat();
            saveOrbat();
        }

        function saveOrbat() {
            fetch('/api/orbat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ boxes })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log('Orbat saved successfully');
                }
            });
        }

        window.onload = loadOrbat;
    </script>
</body>
</html>
